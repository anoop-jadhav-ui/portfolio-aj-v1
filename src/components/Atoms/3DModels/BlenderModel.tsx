/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 --types ./src/assets/3dModels/blender.glb --transform -s
*/

import { useGLTF } from '@react-three/drei'
import React from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import CanvasHOC from '../../Molecules/CanvasHOC/CanvasHOC'

type GLTFResult = GLTF & {
    nodes: {
        outerRim: THREE.Mesh
        center: THREE.Mesh
    }
    materials: {}
}

const orangeMaterial = new THREE.MeshPhysicalMaterial({
    color: '#EA7600',
    roughness: 1,
    clearcoat: 1,
})

const blueMaterial = new THREE.MeshPhysicalMaterial({
    color: '#265787',
    roughness: 1,
    clearcoat: 1,
})

function BlenderModel(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useGLTF(
        '/blender-transformed.glb'
    ) as unknown as GLTFResult
    return (
        <group {...props} dispose={null}>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.outerRim.geometry}
                material={orangeMaterial}
                position={[0.75, 0, 0.4]}
                scale={[1.67, 1.67, 1.57]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.center.geometry}
                material={blueMaterial}
                position={[0.79, 0, 0.27]}
                scale={0.61}
            />
        </group>
    )
}

useGLTF.preload('/blender-transformed.glb')

export default CanvasHOC(BlenderModel, 'Blender', {
    rotation: [Math.PI / 2, 0, 0],
    polar: [-Math.PI / 8, Math.PI / 8],
    azimuth: [-Math.PI / 6, Math.PI / 6],
})
